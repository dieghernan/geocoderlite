[{"path":"https://dieghernan.github.io/nominatimlite/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 nominatimlite authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/articles/nominatimlite.html","id":"why-nominatimlite","dir":"Articles","previous_headings":"","what":"Why nominatimlite?","title":"Get started with nominatimlite","text":"main goal nominatimlite access Nominatim API avoiding dependency curl. situations, curl may available accessible, nominatimlite uses base functions overcome limitation.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/articles/nominatimlite.html","id":"recommended-packages","dir":"Articles","previous_headings":"","what":"Recommended packages","title":"Get started with nominatimlite","text":"packages much complete mature nominatimlite, presents similar features: tidygeocoder Jesse Cambon. Allows interface Nominatim, Google, TomTom, Mapbox, etc. geocoding reverse geocoding. osmdata Mark Padgham. Great downloading spatial data OpenStreetMap, via Overpass API.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/dev/articles/nominatimlite.html","id":"sf-objects","dir":"Articles","previous_headings":"Usage","what":"sf objects","title":"Get started with nominatimlite","text":"nominatimlite can extract spatial objects easily: plot chunk pizzahut can also extract polygon line objects (available) using option points_only = FALSE:","code":"library(nominatimlite)  # Extract some points - Pizza Hut in California  CA <- geo_lite_sf(\"California\", points_only = FALSE)  pizzahut <- geo_lite_sf(\"Pizza Hut, California\",   limit = 50,   custom_query = list(countrycodes = \"us\") )  library(ggplot2)  ggplot(CA) +   geom_sf() +   geom_sf(data = pizzahut, col = \"red\") sol_poly <- geo_lite_sf(\"Statue of Liberty, NY, USA\", points_only = FALSE)  ggplot(sol_poly) +   geom_sf()"},{"path":"https://dieghernan.github.io/nominatimlite/dev/articles/nominatimlite.html","id":"geocoding-and-reverse-geocoding","dir":"Articles","previous_headings":"Usage","what":"Geocoding and reverse geocoding","title":"Get started with nominatimlite","text":"Note: examples adapted tidygeocoder package first example geocode addresses using geo_lite() function: latitude longitude returned geocoder service example, full_results = TRUE can used return data geocoder service. perform reverse geocoding (obtaining addresses geographic coordinates), can use reverse_geo_lite() function. arguments similar geo_lite() function, now specify input data columns lat long arguments. dataset used geocoder query . single line address returned column named address. advance users, see Nominatim docs check parameters available.","code":"library(tibble)  # create a dataframe with addresses some_addresses <- tribble(   ~name,                  ~addr,   \"White House\",          \"1600 Pennsylvania Ave NW, Washington, DC\",   \"Transamerica Pyramid\", \"600 Montgomery St, San Francisco, CA 94111\",   \"Willis Tower\",         \"233 S Wacker Dr, Chicago, IL 60606\" )  # geocode the addresses lat_longs <- geo_lite(some_addresses$addr, lat = \"latitude\", long = \"longitude\") reverse <- reverse_geo_lite(   lat = lat_longs$latitude, long = lat_longs$longitude,   address = \"address_found\" )"},{"path":"https://dieghernan.github.io/nominatimlite/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Diego Hernangómez. Author, maintainer, copyright holder. Jindra Lacko. Contributor, reviewer.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hernangomez D (2023). nominatimlite: Interface Nominatim API Service. <https://doi.org/10.5281/zenodo.5113195>, <https://dieghernan.github.io/nominatimlite/>","code":"@Manual{R-nominatimlite,   title = {nominatimlite: Interface with 'Nominatim' API Service},   author = {Diego Hernangómez},   year = {2023},   version = {0.1.6.9000},   doi = {10.5281/zenodo.5113195},   url = {https://dieghernan.github.io/nominatimlite/},   abstract = {Lite interface for getting data from OSM service Nominatim . Extract coordinates from addresses, find places near a set of coordinates, search for amenities and return spatial objects on sf format.}, }"},{"path":"https://dieghernan.github.io/nominatimlite/dev/index.html","id":"nominatimlite-","dir":"","previous_headings":"","what":"nominatimlite | Connection with OSM Nominatim API","title":"nominatimlite | Connection with OSM Nominatim API","text":"goal nominatimlite provide light interface geocoding addresses, based Nominatim API. Nominatim tool search OpenStreetMap data name address (geocoding) generate synthetic addresses OSM points (reverse geocoding). also allows load spatial objects using sf package. Full site examples vignettes https://dieghernan.github.io/nominatimlite/","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/index.html","id":"why-nominatimlite","dir":"","previous_headings":"","what":"Why nominatimlite?","title":"nominatimlite | Connection with OSM Nominatim API","text":"main goal nominatimlite access Nominatim API avoiding dependency curl. situations, curl may available accessible, nominatimlite uses base functions overcome limitation.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/index.html","id":"recommended-packages","dir":"","previous_headings":"","what":"Recommended packages","title":"nominatimlite | Connection with OSM Nominatim API","text":"packages much complete mature nominatimlite, presents similar features: tidygeocoder Jesse Cambon. Allows interface Nominatim, Google, TomTom, Mapbox, etc. geocoding reverse geocoding. osmdata Mark Padgham. Great downloading spatial data OpenStreetMap, via Overpass API.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"nominatimlite | Connection with OSM Nominatim API","text":"Install nominatimlite CRAN: can install developing version nominatimlite : Alternatively, can install nominatimlite using r-universe:","code":"install.packages(\"nominatimlite\") devtools::install_github(\"dieghernan/nominatimlite\") # Enable this universe options(repos = c(   dieghernan = \"https://dieghernan.r-universe.dev\",   CRAN = \"https://cloud.r-project.org\" ))   install.packages(\"nominatimlite\")"},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/dev/index.html","id":"sf-objects","dir":"","previous_headings":"Usage","what":"sf objects","title":"nominatimlite | Connection with OSM Nominatim API","text":"nominatimlite can extract spatial objects easily:  can also extract polygon line objects (provided Nominatim API) using option points_only = FALSE:","code":"library(nominatimlite)  # Extract some points - Pizza Hut in California  CA <- geo_lite_sf(\"California\", points_only = FALSE)  pizzahut <- geo_lite_sf(\"Pizza Hut, California\",   limit = 50,   custom_query = list(countrycodes = \"us\") )  library(ggplot2)  ggplot(CA) +   geom_sf() +   geom_sf(data = pizzahut, col = \"red\") sol_poly <- geo_lite_sf(\"Statue of Liberty, NY, USA\", points_only = FALSE) # a building - a polygon  ggplot(sol_poly) +   geom_sf() dayton <- geo_lite_sf(\"Dayton, OH\") # default - a point ohio_state <- geo_lite_sf(\"Ohio, USA\", points_only = FALSE) # a US state - a polygon ohio_river <- geo_lite_sf(\"Ohio river\", points_only = FALSE) # a river - a line  ggplot() +   geom_sf(data = ohio_state) +   geom_sf(data = dayton, color = \"red\", pch = 4) +   geom_sf(data = ohio_river, color = \"blue\")"},{"path":"https://dieghernan.github.io/nominatimlite/dev/index.html","id":"geocoding-and-reverse-geocoding","dir":"","previous_headings":"Usage","what":"Geocoding and reverse geocoding","title":"nominatimlite | Connection with OSM Nominatim API","text":"Note: examples adapted tidygeocoder package first example geocode addresses using geo_lite() function: latitude longitude returned geocoder service example, full_results = TRUE can used return data geocoder service. perform reverse geocoding (obtaining addresses geographic coordinates), can use reverse_geo_lite() function. arguments similar geo_lite() function, now specify input data columns lat long arguments. dataset used geocoder query . single line address returned column named address. advance users, see Nominatim docs check parameters available.","code":"library(tibble)  # create a dataframe with addresses some_addresses <- tribble(   ~name,                  ~addr,   \"White House\",          \"1600 Pennsylvania Ave NW, Washington, DC\",   \"Transamerica Pyramid\", \"600 Montgomery St, San Francisco, CA 94111\",   \"Willis Tower\",         \"233 S Wacker Dr, Chicago, IL 60606\" )  # geocode the addresses lat_longs <- geo_lite(some_addresses$addr, lat = \"latitude\", long = \"longitude\") reverse <- reverse_geo_lite(   lat = lat_longs$latitude, long = lat_longs$longitude,   address = \"address_found\" )"},{"path":"https://dieghernan.github.io/nominatimlite/dev/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"nominatimlite | Connection with OSM Nominatim API","text":"cite ‘nominatimlite’ package publications use: Hernangomez D (2023). nominatimlite: Interface Nominatim API Service. https://doi.org/10.5281/zenodo.5113195, https://dieghernan.github.io/nominatimlite/ BibTeX entry LaTeX users ","code":"@Manual{R-nominatimlite,   title = {nominatimlite: Interface with 'Nominatim' API Service},   author = {Diego Hernangómez},   year = {2023},   version = {0.1.6.9000},   doi = {10.5281/zenodo.5113195},   url = {https://dieghernan.github.io/nominatimlite/},   abstract = {Lite interface for getting data from OSM service Nominatim <https://nominatim.org/release-docs/latest/>. Extract coordinates from addresses, find places near a set of coordinates, search for amenities and return spatial objects on sf format.}, }"},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/api_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for centralize API queries — api_call","title":"Helper function for centralize API queries — api_call","text":"wrapper utils::download.file(). warning error retry call. Requests adjusted rate 1 query per second. See Nominatim Usage Policy.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/api_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for centralize API queries — api_call","text":"","code":"api_call(url, destfile, quiet)"},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/api_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for centralize API queries — api_call","text":"url character string (longer vector     \"libcurl\" method) naming URL resource     downloaded. destfile character string (vector, see url     argument) file path downloaded file     saved.  Tilde-expansion performed. quiet TRUE, suppress status messages (),     progress bar.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/api_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for centralize API queries — api_call","text":"logical TRUE/FALSE","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/bbox_to_poly.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a bounding box sf object — bbox_to_poly","title":"Create a bounding box sf object — bbox_to_poly","text":"Create sf polygon object coordinates bounding box","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/bbox_to_poly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a bounding box sf object — bbox_to_poly","text":"","code":"bbox_to_poly(bbox = NA, xmin = NA, ymin = NA, xmax = NA, ymax = NA, crs = 4326)"},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/bbox_to_poly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a bounding box sf object — bbox_to_poly","text":"bbox numeric vector 4 elements representing coordinates bounding box. Values c(xmin, ymin, xmax, ymax) xmin, ymin, xmax, ymax alternatively, can use named parameters instead bbox crs coordinate reference system, something suitable input st_crs","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/bbox_to_poly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a bounding box sf object — bbox_to_poly","text":"sfc object class POLYGON.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/bbox_to_poly.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a bounding box sf object — bbox_to_poly","text":"Bounding boxes can located using different online tools, Bounding Box Tool.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/bbox_to_poly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a bounding box sf object — bbox_to_poly","text":"","code":"# bounding box of Germany bbox_GER <- c(5.86631529, 47.27011137, 15.04193189, 55.09916098)  bbox_GER_sf <- bbox_to_poly(bbox_GER)   library(ggplot2)  ggplot(bbox_GER_sf) +   geom_sf()  # \\donttest{ # Extract the bounding box of a sf object Texas <- geo_lite_sf(\"Texas\", points_only = FALSE) bbox <- sf::st_bbox(Texas)  bbox #>       xmin       ymin       xmax       ymax  #> -106.64580   25.83706  -93.50782   36.50045   bbox_Texas <- bbox_to_poly(bbox)  ggplot(bbox_Texas) +   geom_sf(col = \"red\") +   geom_sf(data = Texas)  # }"},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_address_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Address Lookup API for OSM objects — geo_address_lookup","title":"Address Lookup API for OSM objects — geo_address_lookup","text":"lookup API allows query address details one multiple OSM objects like node, way relation. function returns tibble associated query, see geo_address_lookup_sf() retrieving data spatial object ((sf) format).","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_address_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Address Lookup API for OSM objects — geo_address_lookup","text":"","code":"geo_address_lookup(   osm_ids,   type = c(\"N\", \"W\", \"R\"),   lat = \"lat\",   long = \"lon\",   full_results = FALSE,   return_addresses = TRUE,   verbose = FALSE,   custom_query = list() )"},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_address_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Address Lookup API for OSM objects — geo_address_lookup","text":"osm_ids vector OSM identifiers numeric (c(00000, 11111, 22222)). type vector character type OSM type associated osm_ids. Possible values node (\"N\"), way (\"W\") relation (\"R\"). single value provided recycled. lat latitude column name output data (default  \"lat\"). long longitude column name output data (default  \"long\"). full_results returns available data API service. FALSE (default) latitude, longitude address columns returned. See also return_addresses. return_addresses return input addresses results TRUE. verbose TRUE detailed logs output console. custom_query named list API-specific parameters used (.e. list(countrycodes = \"US\")). See Details.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_address_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Address Lookup API for OSM objects — geo_address_lookup","text":"tibble results found query.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_address_lookup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Address Lookup API for OSM objects — geo_address_lookup","text":"See https://nominatim.org/release-docs/develop/api/Lookup/ additional parameters passed custom_query.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_address_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Address Lookup API for OSM objects — geo_address_lookup","text":"","code":"# \\donttest{ ids <- geo_address_lookup(osm_ids = c(46240148, 34633854), type = \"W\")  ids #> # A tibble: 2 × 4 #>   query       lat   lon address                                                  #>   <chr>     <dbl> <dbl> <chr>                                                    #> 1 W46240148  40.8 -73.9 5th Avenue, Manhattan Community Board 10, Manhattan, Ne… #> 2 W34633854  40.7 -74.0 Empire State Building, 350, 5th Avenue, Manhattan Commu…  several <- geo_address_lookup(c(146656, 240109189), type = c(\"R\", \"N\")) several #> # A tibble: 2 × 4 #>   query        lat   lon address                                                 #>   <chr>      <dbl> <dbl> <chr>                                                   #> 1 R146656     53.5 -2.25 Manchester, Greater Manchester, England, United Kingdom #> 2 N240109189  52.5 13.4  Berlin, Deutschland                                     # }"},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_address_lookup_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Address Lookup API for OSM objects in Spatial Format — geo_address_lookup_sf","title":"Address Lookup API for OSM objects in Spatial Format — geo_address_lookup_sf","text":"lookup API allows query address details one multiple OSM objects like node, way relation. function returns (sf) spatial object associated query, see geo_address_lookup() retrieving data tibble format.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_address_lookup_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Address Lookup API for OSM objects in Spatial Format — geo_address_lookup_sf","text":"","code":"geo_address_lookup_sf(   osm_ids,   type = c(\"N\", \"W\", \"R\"),   full_results = FALSE,   return_addresses = TRUE,   verbose = FALSE,   custom_query = list(),   points_only = TRUE )"},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_address_lookup_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Address Lookup API for OSM objects in Spatial Format — geo_address_lookup_sf","text":"osm_ids vector OSM identifiers numeric (c(00000, 11111, 22222)). type vector character type OSM type associated osm_ids. Possible values node (\"N\"), way (\"W\") relation (\"R\"). single value provided recycled. full_results returns available data API service. FALSE (default) address columns returned. See also return_addresses. return_addresses return input addresses results TRUE. verbose TRUE detailed logs output console. custom_query named list API-specific parameters used (.e. list(countrycodes = \"US\")). See Details. points_only Logical TRUE/FALSE. Whether return spatial points (TRUE, default) potentially shapes provided Nominatim API (FALSE). See Geometry Types.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_address_lookup_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Address Lookup API for OSM objects in Spatial Format — geo_address_lookup_sf","text":"sf object results.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_address_lookup_sf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Address Lookup API for OSM objects in Spatial Format — geo_address_lookup_sf","text":"See https://nominatim.org/release-docs/latest/api/Lookup/ additional parameters passed custom_query.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_address_lookup_sf.html","id":"about-geometry-types","dir":"Reference","previous_headings":"","what":"About Geometry Types","title":"Address Lookup API for OSM objects in Spatial Format — geo_address_lookup_sf","text":"parameter points_only specifies whether function results points (Nominatim results guaranteed least point geometry) possibly spatial objects. Note type geometry returned case points_only = FALSE depend object geocoded: administrative areas, major buildings like returned polygons rivers, roads like lines amenities may points even case points_only = FALSE call function vectorized, allowing multiple addresses geocoded; case points_only = FALSE  multiple geometry types may returned.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_address_lookup_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Address Lookup API for OSM objects in Spatial Format — geo_address_lookup_sf","text":"","code":"# \\donttest{ # Notre Dame Cathedral, Paris  NotreDame <- geo_address_lookup_sf(osm_ids = 201611261, type = \"W\")  library(ggplot2)  ggplot(NotreDame) +   geom_sf()   NotreDame_poly <- geo_address_lookup_sf(201611261,   type = \"W\",   points_only = FALSE )  ggplot(NotreDame_poly) +   geom_sf()   # It is vectorized  several <- geo_address_lookup_sf(c(146656, 240109189), type = c(\"R\", \"N\")) several #> Simple feature collection with 2 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -2.245115 ymin: 52.51704 xmax: 13.38886 ymax: 53.47949 #> Geodetic CRS:  WGS 84 #> # A tibble: 2 × 3 #>   query      address                                               geometry #> * <chr>      <chr>                                              <POINT [°]> #> 1 R146656    Manchester, Greater Manchester, England,… (-2.245115 53.47949) #> 2 N240109189 Berlin, Deutschland                        (13.38886 52.51704) # }"},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_amenity.html","id":null,"dir":"Reference","previous_headings":"","what":"Geocode amenities — geo_amenity","title":"Geocode amenities — geo_amenity","text":"function search amenities defined OpenStreetMap restricted area defined bounding box form (<min_latitude>, <min_longitude>, <max_latitude>, <max_longitude>). function returns tibble associated query, see geo_amenity_sf() retrieving data spatial object (((sf) format).","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_amenity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geocode amenities — geo_amenity","text":"","code":"geo_amenity(   bbox,   amenity,   lat = \"lat\",   long = \"lon\",   limit = 1,   full_results = FALSE,   return_addresses = TRUE,   verbose = FALSE,   custom_query = list(),   strict = FALSE )"},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_amenity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geocode amenities — geo_amenity","text":"bbox numeric vector latitude longitude (<min_latitude>, <min_longitude>, <max_latitude>, <max_longitude>) restrict search area. See Details. amenity character vector character amenities geolocated (.e. c(\"pub\", \"restaurant\")). See Details osm_amenities. lat latitude column name output data (default  \"lat\"). long longitude column name output data (default  \"long\"). limit maximum number results return per input address. Note query returns maximum 50 results. full_results returns available data API service. FALSE (default) latitude, longitude address columns returned. See also return_addresses. return_addresses return input addresses results TRUE. verbose TRUE detailed logs output console. custom_query API-specific parameters used. See geo_lite(). strict Logical TRUE/FALSE. Force results included inside bbox. Note Nominatim default behavior may return results located outside provided bounding box.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_amenity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geocode amenities — geo_amenity","text":"tibble results.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_amenity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geocode amenities — geo_amenity","text":"Bounding boxes can located using different online tools, Bounding Box Tool. full list valid amenities see https://wiki.openstreetmap.org/wiki/Key:amenity.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_amenity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geocode amenities — geo_amenity","text":"","code":"# \\donttest{ # Times Square, NY, USA bbox <- c(-73.9894467311, 40.75573629, -73.9830630737, 40.75789245)  geo_amenity(bbox = bbox, amenity = \"restaurant\") #> # A tibble: 1 × 4 #>   query        lat   lon address                                                 #>   <chr>      <dbl> <dbl> <chr>                                                   #> 1 restaurant  40.8 -74.0 Sardi's, 234, West 44th Street, Theater District, Manh…  # Several amenities geo_amenity(bbox = bbox, amenity = c(\"restaurant\", \"pub\")) #> # A tibble: 2 × 4 #>   query        lat   lon address                                                 #>   <chr>      <dbl> <dbl> <chr>                                                   #> 1 restaurant  40.8 -74.0 Sardi's, 234, West 44th Street, Theater District, Manh… #> 2 pub         40.8 -74.0 BXL Cafe, 125, West 43rd Street, Theater District, Man…  # Increase limit and use with strict geo_amenity(   bbox = bbox, amenity = c(\"restaurant\", \"pub\"), limit = 10,   strict = TRUE ) #> # A tibble: 16 × 4 #>    query        lat   lon address                                                #>    <chr>      <dbl> <dbl> <chr>                                                  #>  1 restaurant  40.8 -74.0 Sardi's, 234, West 44th Street, Theater District, Man… #>  2 restaurant  40.8 -74.0 Dave & Buster's, 234, West 42nd Street, Theater Distr… #>  3 restaurant  40.8 -74.0 Applebee's, 234, West 42nd Street, Theater District, … #>  4 restaurant  40.8 -74.0 Brooklyn Deli, 1501, Broadway, Theater District, Manh… #>  5 restaurant  40.8 -74.0 Dallas BBQ, 241, West 42nd Street, Theater District, … #>  6 restaurant  40.8 -74.0 Villa Fresh Italian Kitchen, 263, West 42nd Street, T… #>  7 restaurant  40.8 -74.0 Carmine's, 200, West 44th Street, Theater District, M… #>  8 restaurant  40.8 -74.0 The Lambs Club, West 44th Street, Theater District, M… #>  9 restaurant  40.8 -74.0 Haru Sushi, 229, West 43rd Street, Theater District, … #> 10 restaurant  40.8 -74.0 Hard Rock Cafe, 1501, Broadway, Theater District, Man… #> 11 pub         40.8 -74.0 BXL Cafe, 125, West 43rd Street, Theater District, Ma… #> 12 pub         40.8 -74.0 O'Lunney's, 145, West 45th Street, Times Square, Manh… #> 13 pub         40.8 -74.0 Jimmy's Corner, 140, West 44th Street, Theater Distri… #> 14 pub         40.8 -74.0 O’Brien’s, 134, West 46th Street, Times Square, Manha… #> 15 pub         40.8 -74.0 Connolly's, 121, West 45th Street, Times Square, Manh… #> 16 pub         40.8 -74.0 Perfect Pint, 123, West 45th Street, Times Square, Ma… # }"},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_amenity_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Geocode amenities in Spatial format — geo_amenity_sf","title":"Geocode amenities in Spatial format — geo_amenity_sf","text":"function search amenities defined OpenStreetMap restricted area defined bounding box form (<min_latitude>, <min_longitude>, <max_latitude>, <max_longitude>). function returns (sf) spatial object associated query, see geo_amenity() retrieving data tibble format.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_amenity_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geocode amenities in Spatial format — geo_amenity_sf","text":"","code":"geo_amenity_sf(   bbox,   amenity,   limit = 1,   full_results = FALSE,   return_addresses = TRUE,   verbose = FALSE,   custom_query = list(),   points_only = TRUE,   strict = FALSE )"},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_amenity_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geocode amenities in Spatial format — geo_amenity_sf","text":"bbox numeric vector latitude longitude (<min_latitude>, <min_longitude>, <max_latitude>, <max_longitude>) restrict search area. See Details. amenity character vector character amenities geolocated (.e. c(\"pub\", \"restaurant\")). See Details osm_amenities. limit maximum number results return per input address. Note query returns maximum 50 results. full_results returns available data API service. FALSE (default) address columns returned. See also return_addresses. return_addresses return input addresses results TRUE. verbose TRUE detailed logs output console. custom_query named list API-specific parameters used (.e. list(countrycodes = \"US\")). See Details. points_only Logical TRUE/FALSE. Whether return spatial points (TRUE, default) potentially shapes provided Nominatim API (FALSE). See Geometry Types. strict Logical TRUE/FALSE. Force results included inside bbox. Note Nominatim default behavior may return results located outside provided bounding box.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_amenity_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geocode amenities in Spatial format — geo_amenity_sf","text":"sf object results.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_amenity_sf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geocode amenities in Spatial format — geo_amenity_sf","text":"Bounding boxes can located using different online tools, Bounding Box Tool. full list valid amenities see https://wiki.openstreetmap.org/wiki/Key:amenity.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_amenity_sf.html","id":"about-geometry-types","dir":"Reference","previous_headings":"","what":"About Geometry Types","title":"Geocode amenities in Spatial format — geo_amenity_sf","text":"parameter points_only specifies whether function results points (Nominatim results guaranteed least point geometry) possibly spatial objects. Note type geometry returned case points_only = FALSE depend object geocoded: administrative areas, major buildings like returned polygons rivers, roads like lines amenities may points even case points_only = FALSE call function vectorized, allowing multiple addresses geocoded; case points_only = FALSE  multiple geometry types may returned.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_amenity_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geocode amenities in Spatial format — geo_amenity_sf","text":"","code":"# \\donttest{ # Madrid, Spain  library(ggplot2)  bbox <- c(-3.888954, 40.311977, -3.517916, 40.643729)  # Restaurants and pubs  rest_pub <- geo_amenity_sf(bbox, c(\"restaurant\", \"pub\"), limit = 50)  ggplot(rest_pub) +   geom_sf()   # Hospital as polygon  hosp <- geo_amenity_sf(bbox, \"hospital\", points_only = FALSE)  ggplot(hosp) +   geom_sf()  # }"},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_lite.html","id":null,"dir":"Reference","previous_headings":"","what":"Address Search API for OSM objects — geo_lite","title":"Address Search API for OSM objects — geo_lite","text":"Geocodes addresses given character values. function returns tibble associated query, see geo_lite_sf() retrieving data spatial object ((sf) format).","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_lite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Address Search API for OSM objects — geo_lite","text":"","code":"geo_lite(   address,   lat = \"lat\",   long = \"lon\",   limit = 1,   full_results = FALSE,   return_addresses = TRUE,   verbose = FALSE,   custom_query = list() )"},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_lite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Address Search API for OSM objects — geo_lite","text":"address character single line address (\"1600 Pennsylvania Ave NW, Washington\") vector addresses (c(\"Madrid\", \"Barcelona\")). lat latitude column name output data (default  \"lat\"). long longitude column name output data (default  \"long\"). limit maximum number results return per input address. Note query returns maximum 50 results. full_results returns available data API service. FALSE (default) latitude, longitude address columns returned. See also return_addresses. return_addresses return input addresses results TRUE. verbose TRUE detailed logs output console. custom_query named list API-specific parameters used (.e. list(countrycodes = \"US\")). See Details.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_lite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Address Search API for OSM objects — geo_lite","text":"tibble results.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_lite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Address Search API for OSM objects — geo_lite","text":"See https://nominatim.org/release-docs/latest/api/Search/ additional parameters passed custom_query.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_lite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Address Search API for OSM objects — geo_lite","text":"","code":"# \\donttest{ geo_lite(\"Madrid, Spain\") #> # A tibble: 1 × 4 #>   query           lat   lon address                                              #>   <chr>         <dbl> <dbl> <chr>                                                #> 1 Madrid, Spain  40.4 -3.70 Madrid, Área metropolitana de Madrid y Corredor del…  # Several addresses geo_lite(c(\"Madrid\", \"Barcelona\")) #> # A tibble: 2 × 4 #>   query       lat   lon address                                                  #>   <chr>     <dbl> <dbl> <chr>                                                    #> 1 Madrid     40.4 -3.70 Madrid, Área metropolitana de Madrid y Corredor del Hen… #> 2 Barcelona  41.4  2.18 Barcelona, Barcelonès, Barcelona, Catalunya, 08001, Esp…  # With options: restrict search to USA geo_lite(c(\"Madrid\", \"Barcelona\"),   custom_query = list(countrycodes = \"US\"),   full_results = TRUE ) #> # A tibble: 2 × 22 #>   query     lat   lon address place_id licence osm_type osm_id boundingbox class #>   <chr>   <dbl> <dbl> <chr>      <int> <chr>   <chr>     <int> <list>      <chr> #> 1 Madrid   41.9 -93.8 Madrid…   2.98e8 Data ©… relation 1.29e5 <chr [4]>   boun… #> 2 Barcel…  42.3 -79.6 Barcel…   4.28e5 Data ©… node     1.58e8 <chr [4]>   place #> # ℹ 12 more variables: type <chr>, importance <dbl>, icon <chr>, town <chr>, #> #   county <chr>, state <chr>, `ISO3166-2-lvl4` <chr>, postcode <chr>, #> #   country <chr>, country_code <chr>, hamlet <chr>, municipality <chr> # }"},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_lite_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Address Search API for OSM objects in Spatial format — geo_lite_sf","title":"Address Search API for OSM objects in Spatial format — geo_lite_sf","text":"function allows geocode addresses return corresponding spatial object. function returns (sf) spatial object associated query, see geo_lite_sf() retrieving data tibble format.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_lite_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Address Search API for OSM objects in Spatial format — geo_lite_sf","text":"","code":"geo_lite_sf(   address,   limit = 1,   return_addresses = TRUE,   full_results = FALSE,   verbose = FALSE,   custom_query = list(),   points_only = TRUE )"},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_lite_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Address Search API for OSM objects in Spatial format — geo_lite_sf","text":"address character single line address (\"1600 Pennsylvania Ave NW, Washington\") vector addresses (c(\"Madrid\", \"Barcelona\")). limit maximum number results return per input address. Note query returns maximum 50 results. return_addresses return input addresses results TRUE. full_results returns available data API service. FALSE (default) address columns returned. See also return_addresses. verbose TRUE detailed logs output console. custom_query named list API-specific parameters used (.e. list(countrycodes = \"US\")). See Details. points_only Logical TRUE/FALSE. Whether return spatial points (TRUE, default) potentially shapes provided Nominatim API (FALSE). See Geometry Types.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_lite_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Address Search API for OSM objects in Spatial format — geo_lite_sf","text":"sf object results.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_lite_sf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Address Search API for OSM objects in Spatial format — geo_lite_sf","text":"See https://nominatim.org/release-docs/latest/api/Search/ additional parameters passed custom_query.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_lite_sf.html","id":"about-geometry-types","dir":"Reference","previous_headings":"","what":"About Geometry Types","title":"Address Search API for OSM objects in Spatial format — geo_lite_sf","text":"parameter points_only specifies whether function results points (Nominatim results guaranteed least point geometry) possibly spatial objects. Note type geometry returned case points_only = FALSE depend object geocoded: administrative areas, major buildings like returned polygons rivers, roads like lines amenities may points even case points_only = FALSE call function vectorized, allowing multiple addresses geocoded; case points_only = FALSE  multiple geometry types may returned.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/geo_lite_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Address Search API for OSM objects in Spatial format — geo_lite_sf","text":"","code":"# \\donttest{ # Map - Points library(ggplot2)  string <- \"Statue of Liberty, NY, USA\" sol <- geo_lite_sf(string)  ggplot(sol) +   geom_sf()   sol_poly <- geo_lite_sf(string, points_only = FALSE)  ggplot(sol_poly) +   geom_sf() +   geom_sf(data = sol, color = \"red\")    # Several results  Madrid <- geo_lite_sf(\"Madrid\",   limit = 2,   points_only = FALSE, full_results = TRUE )   ggplot(Madrid) +   geom_sf(fill = NA)   Starbucks <- geo_lite_sf(\"Starbucks, New York\",   limit = 20, full_results = TRUE )   ggplot(Starbucks) +   geom_sf()  # }"},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/nominatim_check_access.html","id":null,"dir":"Reference","previous_headings":"","what":"Check access to Nominatim API — nominatim_check_access","title":"Check access to Nominatim API — nominatim_check_access","text":"Check R access resources https://nominatim.openstreetmap.org.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/nominatim_check_access.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check access to Nominatim API — nominatim_check_access","text":"","code":"nominatim_check_access()"},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/nominatim_check_access.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check access to Nominatim API — nominatim_check_access","text":"logical.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/nominatim_check_access.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check access to Nominatim API — nominatim_check_access","text":"","code":"# \\donttest{ nominatim_check_access() #> [1] TRUE # }"},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/nominatimlite-package.html","id":null,"dir":"Reference","previous_headings":"","what":"nominatimlite: Interface with 'Nominatim' API Service — nominatimlite-package","title":"nominatimlite: Interface with 'Nominatim' API Service — nominatimlite-package","text":"Lite interface getting data 'OSM' service 'Nominatim' https://nominatim.org/release-docs/latest/. Extract coordinates addresses, find places near set coordinates, search amenities return spatial objects 'sf' format.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/nominatimlite-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"nominatimlite: Interface with 'Nominatim' API Service — nominatimlite-package","text":"Maintainer: Diego Hernangómez diego.hernangomezherrero@gmail.com (ORCID) [copyright holder] contributors: Jindra Lacko [contributor, reviewer]","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/osm_amenities.html","id":null,"dir":"Reference","previous_headings":"","what":"OpenStreetMap amenity database — osm_amenities","title":"OpenStreetMap amenity database — osm_amenities","text":"Database list amenities available OpenStreetMap.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/osm_amenities.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"OpenStreetMap amenity database — osm_amenities","text":"tibble 100 rows fields: category category amenity amenity name amenity","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/osm_amenities.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"OpenStreetMap amenity database — osm_amenities","text":"https://wiki.openstreetmap.org/wiki/Key:amenity","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/osm_amenities.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"OpenStreetMap amenity database — osm_amenities","text":"Data extracted 14 June 2021.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/osm_amenities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OpenStreetMap amenity database — osm_amenities","text":"","code":"amenities <- nominatimlite::osm_amenities  amenities #> # A tibble: 100 × 2 #>    category   amenity        #>    <chr>      <chr>          #>  1 Sustenance bar            #>  2 Sustenance biergarten     #>  3 Sustenance cafe           #>  4 Sustenance fast_food      #>  5 Sustenance food_court     #>  6 Sustenance ice_cream      #>  7 Sustenance pub            #>  8 Sustenance restaurant     #>  9 Education  college        #> 10 Education  driving_school #> # ℹ 90 more rows"},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/reverse_geo_lite.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse Geocoding API for OSM objects — reverse_geo_lite","title":"Reverse Geocoding API for OSM objects — reverse_geo_lite","text":"Generates address latitude longitude. Latitudes must [-90, 90] longitudes [-180, 180]. function returns tibble associated query, see reverse_geo_lite_sf() retrieving data spatial object ((sf) format).","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/reverse_geo_lite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse Geocoding API for OSM objects — reverse_geo_lite","text":"","code":"reverse_geo_lite(   lat,   long,   address = \"address\",   full_results = FALSE,   return_coords = TRUE,   verbose = FALSE,   custom_query = list() )"},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/reverse_geo_lite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse Geocoding API for OSM objects — reverse_geo_lite","text":"lat latitude values numeric format. Must range [-90, 90]. long longitude values numeric format. Must range [-180, 180]. address address column name output data (default  \"address\"). full_results returns available data API service. FALSE (default) latitude, longitude address columns returned. See also return_addresses. return_coords return input coordinates results TRUE. verbose TRUE detailed logs output console. custom_query API-specific parameters used, passed named list (ie. list(zoom = 3)). See Details.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/reverse_geo_lite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse Geocoding API for OSM objects — reverse_geo_lite","text":"tibble results.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/reverse_geo_lite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reverse Geocoding API for OSM objects — reverse_geo_lite","text":"See https://nominatim.org/release-docs/develop/api/Reverse/ additional parameters passed custom_query.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/reverse_geo_lite.html","id":"about-zooming","dir":"Reference","previous_headings":"","what":"About Zooming","title":"Reverse Geocoding API for OSM objects — reverse_geo_lite","text":"Use option custom_query = list(zoom = 3) adjust output. equivalences terms zoom:","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/reverse_geo_lite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse Geocoding API for OSM objects — reverse_geo_lite","text":"","code":"# \\donttest{  reverse_geo_lite(lat = 40.75728, long = -73.98586) #> # A tibble: 1 × 3 #>   address                                                              lat   lon #>   <chr>                                                              <dbl> <dbl> #> 1 Times Square, West 44th Street, Theater District, Manhattan, New …  40.8 -74.0  # Several coordinates reverse_geo_lite(lat = c(40.75728, 55.95335), long = c(-73.98586, -3.188375)) #> # A tibble: 2 × 3 #>   address                                                             lat    lon #>   <chr>                                                             <dbl>  <dbl> #> 1 Times Square, West 44th Street, Theater District, Manhattan, New…  40.8 -74.0  #> 2 East End, Waterloo Place, Waterloo Place, Greenside, New Town/Br…  56.0  -3.19  # With options: zoom to country level sev <- reverse_geo_lite(   lat = c(40.75728, 55.95335), long = c(-73.98586, -3.188375),   custom_query = list(zoom = 0, extratags = 1),   verbose = TRUE, full_results = TRUE )  dplyr::glimpse(sev) #> Rows: 2 #> Columns: 41 #> $ address                        <chr> \"United States\", \"United Kingdom\" #> $ lat                            <dbl> 39.78373, 54.70235 #> $ lon                            <dbl> -100.445882, -3.276575 #> $ place_id                       <int> 298011824, 297944570 #> $ licence                        <chr> \"Data © OpenStreetMap contributors, ODb… #> $ osm_type                       <chr> \"relation\", \"relation\" #> $ osm_id                         <int> 148838, 62149 #> $ country                        <chr> \"United States\", \"United Kingdom\" #> $ country_code                   <chr> \"us\", \"gb\" #> $ flag                           <chr> \"https://upload.wikimedia.org/wikipedia… #> $ sqkm                           <chr> \"9826675\", \"243610\" #> $ wikidata                       <chr> \"Q30\", \"Q145\" #> $ wikipedia                      <chr> \"en:United States\", \"en:United Kingdom\" #> $ population                     <chr> \"331449281\", \"61792000\" #> $ border_type                    <chr> \"national\", NA #> $ capital_city                   <chr> \"Washington DC\", NA #> $ linked_place                   <chr> \"country\", \"country\" #> $ `contact:website`              <chr> \"https://www.usa.gov\", NA #> $ `population:date`              <chr> \"2020\", NA #> $ `ISO3166-1:alpha2`             <chr> \"US\", \"GB\" #> $ `ISO3166-1:alpha3`             <chr> \"USA\", \"GBR\" #> $ default_language               <chr> \"en\", NA #> $ `ISO3166-1:numeric`            <chr> \"840\", \"826\" #> $ `alt_short_name:en`            <chr> \"US\", NA #> $ `alt_short_name:pl`            <chr> \"St. Zj.\", NA #> $ country_code_fips              <chr> \"US\", NA #> $ `old_short_name:ru`            <chr> \"САСШ\", NA #> $ `source:population`            <chr> \"census.gov\", \"http://www.statistics.go… #> $ `not:official_name:vi`         <chr> \"Hợp chủng quốc Hoa Kỳ;Hợp chúng quốc H… #> $ country_code_iso3166_1_alpha_2 <chr> \"US\", NA #> $ boundingbox                    <list> <-14.76084, 71.58895, -180.00000, 180.0… #> $ `ref:gss`                      <chr> NA, \"K02000001\" #> $ currency                       <chr> NA, \"GBP\" #> $ timezone                       <chr> NA, \"Europe/London\" #> $ native_name                    <chr> NA, \"United Kingdom of Great Britain an… #> $ `source:sqkm`                  <chr> NA, \"CIA World Factbook\" #> $ driving_side                   <chr> NA, \"left\" #> $ `native_name:da`               <chr> NA, \"Det Forenede Kongerige Storbritann… #> $ `native_name:es`               <chr> NA, \"Reino Unido de Gran Bretaña e Irla… #> $ `native_name:vi`               <chr> NA, \"Vương quốc Liên hiệp Anh và Bắc Ir… #> $ `source:ref:gss`               <chr> NA, \"ONS_OpenData\" # }"},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/reverse_geo_lite_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse Geocoding API for OSM objects in Spatial format — reverse_geo_lite_sf","title":"Reverse Geocoding API for OSM objects in Spatial format — reverse_geo_lite_sf","text":"Generates address latitude longitude. Latitudes must [-90, 90] longitudes [-180, 180]. function returns (sf) spatial object associated query, see reverse_geo_lite() retrieving data tibble format.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/reverse_geo_lite_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse Geocoding API for OSM objects in Spatial format — reverse_geo_lite_sf","text":"","code":"reverse_geo_lite_sf(   lat,   long,   address = \"address\",   full_results = FALSE,   return_coords = TRUE,   verbose = FALSE,   custom_query = list(),   points_only = TRUE )"},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/reverse_geo_lite_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse Geocoding API for OSM objects in Spatial format — reverse_geo_lite_sf","text":"lat latitude values numeric format. Must range [-90, 90]. long longitude values numeric format. Must range [-180, 180]. address address column name output data (default  \"address\"). full_results returns available data API service. FALSE (default) latitude, longitude address columns returned. See also return_addresses. return_coords return input coordinates results TRUE. verbose TRUE detailed logs output console. custom_query API-specific parameters used, passed named list (ie. list(zoom = 3)). See Details. points_only Logical TRUE/FALSE. Whether return spatial points (TRUE, default) potentially shapes provided Nominatim API (FALSE). See Geometry Types.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/reverse_geo_lite_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse Geocoding API for OSM objects in Spatial format — reverse_geo_lite_sf","text":"sf object results.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/reverse_geo_lite_sf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reverse Geocoding API for OSM objects in Spatial format — reverse_geo_lite_sf","text":"See https://nominatim.org/release-docs/develop/api/Reverse/ additional parameters passed custom_query.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/reverse_geo_lite_sf.html","id":"about-zooming","dir":"Reference","previous_headings":"","what":"About Zooming","title":"Reverse Geocoding API for OSM objects in Spatial format — reverse_geo_lite_sf","text":"Use option custom_query = list(zoom = 3) adjust output. equivalences terms zoom:","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/reverse_geo_lite_sf.html","id":"about-geometry-types","dir":"Reference","previous_headings":"","what":"About Geometry Types","title":"Reverse Geocoding API for OSM objects in Spatial format — reverse_geo_lite_sf","text":"parameter points_only specifies whether function results points (Nominatim results guaranteed least point geometry) possibly spatial objects. Note type geometry returned case points_only = FALSE depend object geocoded: administrative areas, major buildings like returned polygons rivers, roads like lines amenities may points even case points_only = FALSE call function vectorized, allowing multiple addresses geocoded; case points_only = FALSE  multiple geometry types may returned.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/dev/reference/reverse_geo_lite_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse Geocoding API for OSM objects in Spatial format — reverse_geo_lite_sf","text":"","code":"# \\donttest{ library(ggplot2)   Coliseum <- geo_lite(\"Coliseo, Rome, Italy\")  # Coliseum Col_sf <- reverse_geo_lite_sf(   lat = Coliseum$lat,   lon = Coliseum$lon,   points_only = FALSE )  ggplot(Col_sf) +   geom_sf()   # City of Rome - Zoom 10  Rome_sf <- reverse_geo_lite_sf(   lat = Coliseum$lat,   lon = Coliseum$lon,   custom_query = list(zoom = 10),   points_only = FALSE )  ggplot(Rome_sf) +   geom_sf()   # County - Zoom 8  County_sf <- reverse_geo_lite_sf(   lat = Coliseum$lat,   lon = Coliseum$lon,   custom_query = list(zoom = 8),   points_only = FALSE )  ggplot(County_sf) +   geom_sf()  # }"},{"path":"https://dieghernan.github.io/nominatimlite/dev/news/index.html","id":"nominatimlite-development-version","dir":"Changelog","previous_headings":"","what":"nominatimlite (development version)","title":"nominatimlite (development version)","text":"rlang tibble explicitly required. Conversions tibble happens dplyr::tibble(). data attributes sf objects returned now tibble, easy printing console. Improvements code tests. Now sf objects can handle correctly nested fields provided json response (example, nested address field provided API). consistent also results provided non-spatial functions, unnesting already handled correctly. Improvements output reverse_geo_lite() reverse_geo_lite_sf() API returns nested lists.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/news/index.html","id":"nominatimlite-016","dir":"Changelog","previous_headings":"","what":"nominatimlite 0.1.6","title":"nominatimlite 0.1.6","text":"CRAN release: 2022-06-10 Improve results response API.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/news/index.html","id":"nominatimlite-015","dir":"Changelog","previous_headings":"","what":"nominatimlite 0.1.5","title":"nominatimlite 0.1.5","text":"CRAN release: 2021-11-26 Avoid de-duplication results.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/news/index.html","id":"nominatimlite-014","dir":"Changelog","previous_headings":"","what":"nominatimlite 0.1.4","title":"nominatimlite 0.1.4","text":"CRAN release: 2021-10-28 Fix issues geo_amenity() geo_amenity_sf().","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/news/index.html","id":"nominatimlite-013","dir":"Changelog","previous_headings":"","what":"nominatimlite 0.1.3","title":"nominatimlite 0.1.3","text":"CRAN release: 2021-10-21 Skip API query tests CRAN avoid false positives. Centralize API queries (internal) function api_call(). Queries fully honors now Nominatim Usage Policy. Queries may slower now.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/news/index.html","id":"nominatimlite-012","dir":"Changelog","previous_headings":"","what":"nominatimlite 0.1.2","title":"nominatimlite 0.1.2","text":"CRAN release: 2021-10-07 New internal: nominatim_check_access(). Adapt tests testthat v3.1.0.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/news/index.html","id":"nominatimlite-011","dir":"Changelog","previous_headings":"","what":"nominatimlite 0.1.1","title":"nominatimlite 0.1.1","text":"CRAN release: 2021-09-30 Adapt tests CRAN checks.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/news/index.html","id":"nominatimlite-010","dir":"Changelog","previous_headings":"","what":"nominatimlite 0.1.0","title":"nominatimlite 0.1.0","text":"CRAN release: 2021-09-16 CRAN release. Adjust query rate limits Nominatim policy. New strict argument geo_amenity() geo_amenity_sf(). Parameter polygon changed points_only #8 thanks @jlacko. Package now falls gracefully url reachable.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/dev/news/index.html","id":"nominatimlite-001","dir":"Changelog","previous_headings":"","what":"nominatimlite 0.0.1","title":"nominatimlite 0.0.1","text":"Initial version package","code":""}]
