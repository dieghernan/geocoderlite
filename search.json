[{"path":"https://dieghernan.github.io/nominatimlite/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 nominatimlite authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/articles/nominatimlite.html","id":"why-nominatimlite","dir":"Articles","previous_headings":"","what":"Why nominatimlite?","title":"Get started with nominatimlite","text":"main goal nominatimlite access Nominatim API avoiding dependency curl. situations, curl may available accessible, nominatimlite uses base functions overcome limitation.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/articles/nominatimlite.html","id":"recommended-packages","dir":"Articles","previous_headings":"","what":"Recommended packages","title":"Get started with nominatimlite","text":"packages much complete mature nominatimlite, presents similar features: tidygeocoder Jesse Cambon. Allows interface Nominatim, Google, TomTom, Mapbox, etc. geocoding reverse geocoding. osmdata Mark Padgham. Great downloading spatial data OpenStreetMap, via Overpass API.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/articles/nominatimlite.html","id":"sf-objects","dir":"Articles","previous_headings":"Usage","what":"sf objects","title":"Get started with nominatimlite","text":"nominatimlite can extract spatial objects easily: plot chunk pizzahut can also extract polygon line objects (available) using option points_only = FALSE:","code":"library(nominatimlite)  # Extract some points - Pizza Hut in California  CA <- geo_lite_sf(\"California\", points_only = FALSE)  pizzahut <- geo_lite_sf(\"Pizza Hut, California\",   limit = 50,   custom_query = list(countrycodes = \"us\") )  library(ggplot2)  ggplot(CA) +   geom_sf() +   geom_sf(data = pizzahut, col = \"red\") pentagon_poly <- geo_lite_sf(\"Pentagon\", points_only = FALSE)  ggplot(pentagon_poly) +   geom_sf()"},{"path":"https://dieghernan.github.io/nominatimlite/articles/nominatimlite.html","id":"geocoding-and-reverse-geocoding","dir":"Articles","previous_headings":"Usage","what":"Geocoding and reverse geocoding","title":"Get started with nominatimlite","text":"Note: examples adapted tidygeocoder package first example geocode addresses using geo_lite() function: latitude longitude returned geocoder service example, full_results = TRUE can used return data geocoder service. perform reverse geocoding (obtaining addresses geographic coordinates), can use reverse_geo_lite() function. arguments similar geo_lite() function, now specify input data columns lat long arguments. dataset used geocoder query . single line address returned column named address. advance users, see Nominatim docs check parameters available.","code":"library(tibble)  # create a dataframe with addresses some_addresses <- tribble(   ~name,                  ~addr,   \"White House\",          \"1600 Pennsylvania Ave NW, Washington, DC\",   \"Transamerica Pyramid\", \"600 Montgomery St, San Francisco, CA 94111\",   \"Willis Tower\",         \"233 S Wacker Dr, Chicago, IL 60606\" )  # geocode the addresses lat_longs <- geo_lite(some_addresses$addr, lat = \"latitude\", long = \"longitude\") reverse <- reverse_geo_lite(   lat = lat_longs$latitude, long = lat_longs$longitude,   address = \"address_found\" )"},{"path":"https://dieghernan.github.io/nominatimlite/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Diego Hernangómez. Author, maintainer, copyright holder. Jindra Lacko. Contributor, reviewer.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hernangómez D (2021). nominatimlite: Interface 'Nominatim' API Service. doi: 10.5281/zenodo.5113195, https://dieghernan.github.io/nominatimlite/.","code":"@Manual{,   title = {nominatimlite: Interface with 'Nominatim' API Service},   author = {Diego Hernangómez},   year = {2021},   version = {0.1.5},   doi = {10.5281/zenodo.5113195},   url = {https://dieghernan.github.io/nominatimlite/},   abstract = {Lite interface for getting data from 'OSM' service 'Nominatim' . Extract coordinates from addresses, find places near a set of coordinates, search for amenities and return spatial objects on 'sf' format.}, }"},{"path":"https://dieghernan.github.io/nominatimlite/index.html","id":"nominatimlite-","dir":"","previous_headings":"","what":"nominatimlite | Connection with OSM Nominatim API","title":"nominatimlite | Connection with OSM Nominatim API","text":"goal nominatimlite provide light interface geocoding addresses, based Nominatim API. Nominatim tool search OpenStreetMap data name address (geocoding) generate synthetic addresses OSM points (reverse geocoding). also allows load spatial objects using sf package. Full site examples vignettes https://dieghernan.github.io/nominatimlite/","code":""},{"path":"https://dieghernan.github.io/nominatimlite/index.html","id":"why-nominatimlite","dir":"","previous_headings":"","what":"Why nominatimlite?","title":"nominatimlite | Connection with OSM Nominatim API","text":"main goal nominatimlite access Nominatim API avoiding dependency curl. situations, curl may available accessible, nominatimlite uses base functions overcome limitation.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/index.html","id":"recommended-packages","dir":"","previous_headings":"","what":"Recommended packages","title":"nominatimlite | Connection with OSM Nominatim API","text":"packages much complete mature nominatimlite, presents similar features: tidygeocoder Jesse Cambon. Allows interface Nominatim, Google, TomTom, Mapbox, etc. geocoding reverse geocoding. osmdata Mark Padgham. Great downloading spatial data OpenStreetMap, via Overpass API.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"nominatimlite | Connection with OSM Nominatim API","text":"Install nominatimlite CRAN: can install developing version nominatimlite : Alternatively, can install nominatimlite using r-universe:","code":"install.packages(\"nominatimlite\") devtools::install_github(\"dieghernan/nominatimlite\") # Enable this universe options(repos = c(   dieghernan = \"https://dieghernan.r-universe.dev\",   CRAN = \"https://cloud.r-project.org\" ))   install.packages(\"nominatimlite\")"},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/index.html","id":"sf-objects","dir":"","previous_headings":"Usage","what":"sf objects","title":"nominatimlite | Connection with OSM Nominatim API","text":"nominatimlite can extract spatial objects easily:  can also extract polygon line objects (provided Nominatim API) using option points_only = FALSE:","code":"library(nominatimlite)  # Extract some points - Pizza Hut in California  CA <- geo_lite_sf(\"California\", points_only = FALSE)  pizzahut <- geo_lite_sf(\"Pizza Hut, California\",   limit = 50,   custom_query = list(countrycodes = \"us\") )  library(ggplot2)  ggplot(CA) +   geom_sf() +   geom_sf(data = pizzahut, col = \"red\") pentagon_poly <- geo_lite_sf(\"Pentagon\", points_only = FALSE) # a building - a polygon  ggplot(pentagon_poly) +   geom_sf() dayton <- geo_lite_sf(\"Dayton, OH\") # default - a point ohio_state <- geo_lite_sf(\"Ohio, USA\", points_only = FALSE) # a US state - a polygon ohio_river <- geo_lite_sf(\"Ohio river\", points_only = FALSE) # a river - a line  ggplot() +   geom_sf(data = ohio_state) +   geom_sf(data = dayton, color = \"red\", pch = 4) +   geom_sf(data = ohio_river, color = \"blue\")"},{"path":"https://dieghernan.github.io/nominatimlite/index.html","id":"geocoding-and-reverse-geocoding","dir":"","previous_headings":"Usage","what":"Geocoding and reverse geocoding","title":"nominatimlite | Connection with OSM Nominatim API","text":"Note: examples adapted tidygeocoder package first example geocode addresses using geo_lite() function: latitude longitude returned geocoder service example, full_results = TRUE can used return data geocoder service. perform reverse geocoding (obtaining addresses geographic coordinates), can use reverse_geo_lite() function. arguments similar geo_lite() function, now specify input data columns lat long arguments. dataset used geocoder query . single line address returned column named address. advance users, see Nominatim docs check parameters available.","code":"library(tibble)  # create a dataframe with addresses some_addresses <- tribble(   ~name,                  ~addr,   \"White House\",          \"1600 Pennsylvania Ave NW, Washington, DC\",   \"Transamerica Pyramid\", \"600 Montgomery St, San Francisco, CA 94111\",   \"Willis Tower\",         \"233 S Wacker Dr, Chicago, IL 60606\" )  # geocode the addresses lat_longs <- geo_lite(some_addresses$addr, lat = \"latitude\", long = \"longitude\") reverse <- reverse_geo_lite(   lat = lat_longs$latitude, long = lat_longs$longitude,   address = \"address_found\" )"},{"path":"https://dieghernan.github.io/nominatimlite/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"nominatimlite | Connection with OSM Nominatim API","text":"cite ‘nominatimlite’ package publications use: Hernangómez D (2021). nominatimlite: Interface ‘Nominatim’ API Service. doi: 10.5281/zenodo.5113195 (URL: https://doi.org/10.5281/zenodo.5113195), <URL: https://dieghernan.github.io/nominatimlite/>. BibTeX entry LaTeX users ","code":"#> @Manual{, #>   title = {nominatimlite: Interface with 'Nominatim' API Service}, #>   author = {Diego Hernangómez}, #>   year = {2021}, #>   version = {0.1.5}, #>   doi = {10.5281/zenodo.5113195}, #>   url = {https://dieghernan.github.io/nominatimlite/}, #>   abstract = {Lite interface for getting data from 'OSM' service 'Nominatim' <https://nominatim.org/release-docs/latest/>. Extract coordinates from addresses, find places near a set of coordinates, search for amenities and return spatial objects on 'sf' format.}, #> }"},{"path":"https://dieghernan.github.io/nominatimlite/reference/api_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for centralize API queries — api_call","title":"Helper function for centralize API queries — api_call","text":"wrapper utils::download.file(). warning error retry call. Requests adjusted rate 1 query per second. See Nominatim Usage Policy.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/api_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for centralize API queries — api_call","text":"","code":"api_call(url, destfile, quiet)"},{"path":"https://dieghernan.github.io/nominatimlite/reference/api_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for centralize API queries — api_call","text":"url character string (longer vector e.g.,     \"libcurl\" method) naming URL resource     downloaded. destfile character string (vector, see url     argument) file path downloaded file     saved.  Tilde-expansion performed. quiet TRUE, suppress status messages (),     progress bar.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/api_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for centralize API queries — api_call","text":"logical TRUE/FALSE","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/reference/bbox_to_poly.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a bounding box sf object — bbox_to_poly","title":"Create a bounding box sf object — bbox_to_poly","text":"Create sf polygon object coordinates bounding box","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/bbox_to_poly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a bounding box sf object — bbox_to_poly","text":"","code":"bbox_to_poly(bbox = NA, xmin = NA, ymin = NA, xmax = NA, ymax = NA, crs = 4326)"},{"path":"https://dieghernan.github.io/nominatimlite/reference/bbox_to_poly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a bounding box sf object — bbox_to_poly","text":"bbox numeric vector 4 elements representing coordinates bounding box. Values c(xmin, ymin, xmax, ymax) xmin, ymin, xmax, ymax alternatively, can use named parameters instead bbox crs coordinate reference system, something suitable input st_crs","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/bbox_to_poly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a bounding box sf object — bbox_to_poly","text":"sf object","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/bbox_to_poly.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a bounding box sf object — bbox_to_poly","text":"Bounding boxes can located using different online tools, Bounding Box Tool.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/reference/bbox_to_poly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a bounding box sf object — bbox_to_poly","text":"","code":"# bounding box of Germany bbox_GER <- c(5.86631529, 47.27011137, 15.04193189, 55.09916098)  bbox_GER_sf <- bbox_to_poly(bbox_GER)   library(ggplot2)  ggplot(bbox_GER_sf) +   geom_sf()  # \\donttest{ # Extract the bounding box of a sf object Texas <- geo_lite_sf(\"Texas\", points_only = FALSE) bbox <- sf::st_bbox(Texas)  bbox #>       xmin       ymin       xmax       ymax  #> -106.64585   25.83706  -93.50782   36.50045   bbox_Texas <- bbox_to_poly(bbox)  ggplot(bbox_Texas) +   geom_sf(col = \"red\") +   geom_sf(data = Texas)  # }"},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_address_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the address and other details of one or multiple OSM objects — geo_address_lookup","title":"Query the address and other details of one or multiple OSM objects — geo_address_lookup","text":"Geocodes addresses OSM objects, identified OSM Id.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_address_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the address and other details of one or multiple OSM objects — geo_address_lookup","text":"","code":"geo_address_lookup(   osm_ids,   type = c(\"N\", \"W\", \"R\"),   lat = \"lat\",   long = \"lon\",   full_results = FALSE,   return_addresses = TRUE,   verbose = FALSE,   custom_query = list() )"},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_address_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query the address and other details of one or multiple OSM objects — geo_address_lookup","text":"osm_ids vector OSM identifiers (c(00000, 11111, 22222)). type vector type OSM type associated osm_ids. Possible values node (\"N\"), way (\"W\") relation (\"R\"). single value provided recycled. lat latitude column name (.e. \"lat\"). long longitude column name (.e. \"long\"). full_results returns available data geocoding service TRUE. FALSE (default) latitude longitude columns returned geocoding service. return_addresses return input addresses results TRUE. Note services return input addresses full_results = TRUE setting return_addresses FALSE prevent . verbose TRUE detailed logs output console. FALSE default. Can set permanently options(tidygeocoder.verbose = TRUE) custom_query API-specific parameters used, passed named list (.e. list(countrycodes = \"US\")). See Details.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_address_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query the address and other details of one or multiple OSM objects — geo_address_lookup","text":"tibble results.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_address_lookup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query the address and other details of one or multiple OSM objects — geo_address_lookup","text":"See https://nominatim.org/release-docs/develop/api/Lookup/ additional parameters passed custom_query.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_address_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query the address and other details of one or multiple OSM objects — geo_address_lookup","text":"","code":"# \\donttest{ ids <- geo_address_lookup(   osm_ids = c(46240148, 34633854),   type = c(\"W\"), )  ids #> # A tibble: 2 × 4 #>   query       lat   lon address                                                  #>   <chr>     <dbl> <dbl> <chr>                                                    #> 1 W46240148  40.8 -73.9 5th Avenue, East Harlem, Manhattan Community Board 10, … #> 2 W34633854  40.7 -74.0 Empire State Building, 350, 5th Avenue, Midtown South, … # }"},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_address_lookup_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Get spatial objects from OSM ids — geo_address_lookup_sf","title":"Get spatial objects from OSM ids — geo_address_lookup_sf","text":"function allows extract spatial objects specific OSM objects.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_address_lookup_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get spatial objects from OSM ids — geo_address_lookup_sf","text":"","code":"geo_address_lookup_sf(   osm_ids,   type = c(\"N\", \"W\", \"R\"),   full_results = FALSE,   return_addresses = TRUE,   verbose = FALSE,   custom_query = list(),   points_only = TRUE )"},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_address_lookup_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get spatial objects from OSM ids — geo_address_lookup_sf","text":"osm_ids vector OSM identifiers (c(00000, 11111, 22222)). type vector type OSM type associated osm_ids. Possible values node (\"N\"), way (\"W\") relation (\"R\"). single value provided recycled. full_results returns available data geocoding service TRUE. FALSE (default) latitude longitude columns returned geocoding service. return_addresses return input addresses results TRUE. Note services return input addresses full_results = TRUE setting return_addresses FALSE prevent . verbose TRUE detailed logs output console. FALSE default. Can set permanently options(tidygeocoder.verbose = TRUE) custom_query API-specific parameters used, passed named list (.e. list(countrycodes = \"US\")). See Details. points_only Logical TRUE/FALSE. Whether return spatial points (TRUE, default) potentially shapes provided Nominatim API (FALSE).","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_address_lookup_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get spatial objects from OSM ids — geo_address_lookup_sf","text":"sf object results.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_address_lookup_sf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get spatial objects from OSM ids — geo_address_lookup_sf","text":"See https://nominatim.org/release-docs/latest/api/Search/ additional parameters passed custom_query.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_address_lookup_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get spatial objects from OSM ids — geo_address_lookup_sf","text":"","code":"# \\donttest{ # Notre Dame Cathedral, Paris  NotreDame <- geo_address_lookup_sf(   osm_ids = c(201611261),   type = c(\"W\") )  library(ggplot2)  ggplot(NotreDame) +   geom_sf()   NotreDame_poly <- geo_address_lookup_sf(   osm_ids = c(201611261),   type = c(\"W\"),   points_only = FALSE )  ggplot(NotreDame_poly) +   geom_sf()  # }"},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_amenity.html","id":null,"dir":"Reference","previous_headings":"","what":"Geocode amenities — geo_amenity","title":"Geocode amenities — geo_amenity","text":"function search amenities defined OpenStreetMap restricted area defined bounding box form (<min_latitude>, <min_longitude>, <max_latitude>, <max_longitude>).","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_amenity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geocode amenities — geo_amenity","text":"","code":"geo_amenity(   bbox,   amenity,   lat = \"lat\",   long = \"lon\",   limit = 1,   full_results = FALSE,   return_addresses = TRUE,   verbose = FALSE,   custom_query = list(),   strict = FALSE )"},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_amenity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geocode amenities — geo_amenity","text":"bbox numeric vector latitude longitude (<min_latitude>, <min_longitude>, <max_latitude>, <max_longitude>) restrict search area. See Details. amenity character vector character amenities geolocated (.e. c(\"pub\", \"restaurant\")). See Details osm_amenities. lat latitude column name (.e. \"lat\"). long longitude column name (.e. \"long\"). limit maximum number results return per input address. Note query returns maximum 50 results. full_results returns available data geocoding service TRUE. FALSE (default) latitude longitude columns returned geocoding service. return_addresses return input addresses results TRUE. Note services return input addresses full_results = TRUE setting return_addresses FALSE prevent . verbose TRUE detailed logs output console. FALSE default. Can set permanently options(tidygeocoder.verbose = TRUE) custom_query API-specific parameters used. See geo_lite(). strict Logical TRUE/FALSE. Force results included inside bbox. Note Nominatim default behaviour may return results located outside provided bounding box.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_amenity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geocode amenities — geo_amenity","text":"tibble results.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_amenity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geocode amenities — geo_amenity","text":"Bounding boxes can located using different online tools, Bounding Box Tool. full list valid amenities see https://wiki.openstreetmap.org/wiki/Key:amenity.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_amenity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geocode amenities — geo_amenity","text":"","code":"# \\donttest{ # Times Square, NY, USA bbox <- c(   -73.9894467311, 40.75573629,   -73.9830630737, 40.75789245 )  geo_amenity(   bbox = bbox,   amenity = \"restaurant\" ) #> # A tibble: 1 × 4 #>   query        lat   lon address                                                 #>   <chr>      <dbl> <dbl> <chr>                                                   #> 1 restaurant  40.8 -74.0 Applebee's, 234, West 42nd Street, Theater District, M…  # Several amenities geo_amenity(   bbox = bbox,   amenity = c(\"restaurant\", \"pub\") ) #> # A tibble: 2 × 4 #>   query        lat   lon address                                                 #>   <chr>      <dbl> <dbl> <chr>                                                   #> 1 restaurant  40.8 -74.0 Applebee's, 234, West 42nd Street, Theater District, M… #> 2 pub         40.8 -74.0 Connolly's, 121, West 45th Street, Theater District, M…  # Increase limit and use with strict geo_amenity(   bbox = bbox,   amenity = c(\"restaurant\", \"pub\"),   limit = 10,   strict = TRUE ) #> # A tibble: 17 × 4 #>    query        lat   lon address                                                #>    <chr>      <dbl> <dbl> <chr>                                                  #>  1 restaurant  40.8 -74.0 Sardi's, 234, West 44th Street, Theater District, Man… #>  2 restaurant  40.8 -74.0 Applebee's, 234, West 42nd Street, Theater District, … #>  3 restaurant  40.8 -74.0 Tony's, 147, West 43rd Street, Theater District, Manh… #>  4 restaurant  40.8 -74.0 Bond45, West 45th Street, Theater District, Manhattan… #>  5 restaurant  40.8 -74.0 Dallas BBQ, 241, West 42nd Street, Theater District, … #>  6 restaurant  40.8 -74.0 Carmine's, 200, West 44th Street, Theater District, M… #>  7 restaurant  40.8 -74.0 bella vita tranttoria, 211, West 43rd Street, Theater… #>  8 restaurant  40.8 -74.0 Guy’s American Kitchen & Bar, 220, West 44th Street, … #>  9 restaurant  40.8 -74.0 Brooklyn Diner, 155, West 43rd Street, Theater Distri… #> 10 restaurant  40.8 -74.0 Planet Hollywood, 1540, Broadway, Theater District, M… #> 11 pub         40.8 -74.0 Connolly's, 121, West 45th Street, Theater District, … #> 12 pub         40.8 -74.0 O’Brien’s, 134, West 46th Street, Theater District, M… #> 13 pub         40.8 -74.0 Perfect Pint, 123, West 45th Street, Theater District… #> 14 pub         40.8 -74.0 Jimmy's Corner, 140, West 44th Street, Theater Distri… #> 15 pub         40.8 -74.0 O'Lunney's, 145, West 45th Street, Theater District, … #> 16 pub         40.8 -74.0 BXL Cafe, 125, West 43rd Street, Theater District, Ma… #> 17 pub         40.8 -74.0 Dave & Buster’s, 234, West 42nd Street, Theater Distr… # }"},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_amenity_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Get spatial objects of amenities — geo_amenity_sf","title":"Get spatial objects of amenities — geo_amenity_sf","text":"function search amenities defined OpenStreetMap restricted area defined bounding box form (<min_latitude>, <min_longitude>, <max_latitude>, <max_longitude>).","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_amenity_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get spatial objects of amenities — geo_amenity_sf","text":"","code":"geo_amenity_sf(   bbox,   amenity,   limit = 1,   full_results = FALSE,   return_addresses = TRUE,   verbose = FALSE,   custom_query = list(),   points_only = TRUE,   strict = FALSE )"},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_amenity_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get spatial objects of amenities — geo_amenity_sf","text":"bbox numeric vector latitude longitude (<min_latitude>, <min_longitude>, <max_latitude>, <max_longitude>) restrict search area. See Details. amenity character vector character amenities geolocated (.e. c(\"pub\", \"restaurant\")). See Details osm_amenities. limit maximum number results return per input address. Note query returns maximum 50 results. full_results returns available data geocoding service TRUE. FALSE (default) latitude longitude columns returned geocoding service. return_addresses return input addresses results TRUE. Note services return input addresses full_results = TRUE setting return_addresses FALSE prevent . verbose TRUE detailed logs output console. FALSE default. Can set permanently options(tidygeocoder.verbose = TRUE) custom_query API-specific parameters used. See geo_lite(). points_only Logical TRUE/FALSE. Whether return spatial points (TRUE, default) potentially shapes provided Nominatim API (FALSE). strict Logical TRUE/FALSE. Force results included inside bbox. Note Nominatim default behaviour may return results located outside provided bounding box.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_amenity_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get spatial objects of amenities — geo_amenity_sf","text":"sf object results.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_amenity_sf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get spatial objects of amenities — geo_amenity_sf","text":"Bounding boxes can located using different online tools, Bounding Box Tool. full list valid amenities see https://wiki.openstreetmap.org/wiki/Key:amenity.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_amenity_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get spatial objects of amenities — geo_amenity_sf","text":"","code":"# \\donttest{ # Madrid, Spain  library(ggplot2)  bbox <- c(   -3.888954, 40.311977,   -3.517916, 40.643729 )  # Restaurants and pubs  rest_pub <- geo_amenity_sf(bbox,   c(\"restaurant\", \"pub\"),   limit = 50 )   ggplot(rest_pub) +   geom_sf()   # Hospital as polygon  hosp <- geo_amenity_sf(bbox,   \"hospital\",   points_only = FALSE )  ggplot(hosp) +   geom_sf()  # }"},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_lite.html","id":null,"dir":"Reference","previous_headings":"","what":"Geocode addresses — geo_lite","title":"Geocode addresses — geo_lite","text":"Geocodes addresses given character values.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_lite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geocode addresses — geo_lite","text":"","code":"geo_lite(   address,   lat = \"lat\",   long = \"lon\",   limit = 1,   full_results = FALSE,   return_addresses = TRUE,   verbose = FALSE,   custom_query = list() )"},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_lite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geocode addresses — geo_lite","text":"address single line address (.e. \"1600 Pennsylvania Ave NW, Washington\") vector addresses (c(\"Madrid\", \"Barcelona\")). lat latitude column name (.e. \"lat\"). long longitude column name (.e. \"long\"). limit maximum number results return per input address. Note query returns maximum 50 results. full_results returns available data geocoding service TRUE. FALSE (default) latitude longitude columns returned geocoding service. return_addresses return input addresses results TRUE. Note services return input addresses full_results = TRUE setting return_addresses FALSE prevent . verbose TRUE detailed logs output console. FALSE default. Can set permanently options(tidygeocoder.verbose = TRUE) custom_query API-specific parameters used, passed named list (.e. list(countrycodes = \"US\")). See Details.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_lite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geocode addresses — geo_lite","text":"tibble results.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_lite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geocode addresses — geo_lite","text":"See https://nominatim.org/release-docs/latest/api/Search/ additional parameters passed custom_query.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_lite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geocode addresses — geo_lite","text":"","code":"# \\donttest{ geo_lite(\"Madrid, Spain\") #> # A tibble: 1 × 4 #>   query           lat   lon address                                              #>   <chr>         <dbl> <dbl> <chr>                                                #> 1 Madrid, Spain  40.4 -3.70 Madrid, Área metropolitana de Madrid y Corredor del…  # Several addresses geo_lite(c(\"Madrid\", \"Barcelona\")) #> # A tibble: 2 × 4 #>   query       lat   lon address                                                  #>   <chr>     <dbl> <dbl> <chr>                                                    #> 1 Madrid     40.4 -3.70 Madrid, Área metropolitana de Madrid y Corredor del Hen… #> 2 Barcelona  41.4  2.18 Barcelona, Barcelonès, Barcelona, Catalunya, 08001, Esp…  # With options: restrict search to USA geo_lite(c(\"Madrid\", \"Barcelona\"),   custom_query = list(countrycodes = \"US\"),   full_results = TRUE ) #> # A tibble: 2 × 20 #>   query    lat   lon address  place_id licence osm_type osm_id boundingbox class #>   <chr>  <dbl> <dbl> <chr>       <int> <chr>   <chr>     <int> <list>      <chr> #> 1 Madrid  41.9 -93.8 Madrid,…   2.82e8 Data ©… relation 1.29e5 <chr [4]>   boun… #> 2 Barce…  42.3 -79.6 Barcelo…   3.93e5 Data ©… node     1.58e8 <chr [4]>   place #> # … with 10 more variables: type <chr>, importance <dbl>, icon <chr>, #> #   village <chr>, county <chr>, state <chr>, postcode <chr>, country <chr>, #> #   country_code <chr>, hamlet <chr> # }"},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_lite_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Get spatial objects through geocoding — geo_lite_sf","title":"Get spatial objects through geocoding — geo_lite_sf","text":"function allows geocode addresses return corresponding spatial object. parameter points_only specifies whether function results points (Nominatim results guaranteed least point geometry) possibly spatial objects. Note type geometry returned case points_only = FALSE depend object geocoded: administrative areas, major buildings like returned polygons rivers, roads like lines amenities may points even case points_only = FALSE call function vectorized, allowing multiple addresses geocoded; case points_only = FALSE  multiple geometry types may returned.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_lite_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get spatial objects through geocoding — geo_lite_sf","text":"","code":"geo_lite_sf(   address,   limit = 1,   return_addresses = TRUE,   full_results = FALSE,   verbose = FALSE,   custom_query = list(),   points_only = TRUE )"},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_lite_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get spatial objects through geocoding — geo_lite_sf","text":"address single line address (.e. \"1600 Pennsylvania Ave NW, Washington\") vector addresses (c(\"Madrid\", \"Barcelona\")). limit maximum number results return per input address. Note query returns maximum 50 results. return_addresses return input addresses results TRUE. Note services return input addresses full_results = TRUE setting return_addresses FALSE prevent . full_results returns available data geocoding service TRUE. FALSE (default) latitude longitude columns returned geocoding service. verbose TRUE detailed logs output console. FALSE default. Can set permanently options(tidygeocoder.verbose = TRUE) custom_query API-specific parameters used, passed named list (.e. list(countrycodes = \"US\")). See Details. points_only Logical TRUE/FALSE. Whether return spatial points (TRUE, default) potentially shapes provided Nominatim API (FALSE).","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_lite_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get spatial objects through geocoding — geo_lite_sf","text":"sf object results.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_lite_sf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get spatial objects through geocoding — geo_lite_sf","text":"See https://nominatim.org/release-docs/latest/api/Search/ additional parameters passed custom_query.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/reference/geo_lite_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get spatial objects through geocoding — geo_lite_sf","text":"","code":"# \\donttest{ # Map - Points library(ggplot2) pentagon <- geo_lite_sf(\"Pentagon\")   ggplot(pentagon) +   geom_sf()   pentagon_poly <- geo_lite_sf(\"Pentagon\", points_only = FALSE)  ggplot(pentagon_poly) +   geom_sf()   # Several results  Madrid <- geo_lite_sf(\"Madrid\",   limit = 2,   points_only = FALSE, full_results = TRUE )   ggplot(Madrid) +   geom_sf(fill = NA)   Starbucks <- geo_lite_sf(\"Starbucks, New York\",   limit = 20, full_results = TRUE )   ggplot(Starbucks) +   geom_sf()  # }"},{"path":"https://dieghernan.github.io/nominatimlite/reference/nominatim_check_access.html","id":null,"dir":"Reference","previous_headings":"","what":"Check access to Nominatim API — nominatim_check_access","title":"Check access to Nominatim API — nominatim_check_access","text":"Check R access resources https://nominatim.openstreetmap.org.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/nominatim_check_access.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check access to Nominatim API — nominatim_check_access","text":"","code":"nominatim_check_access()"},{"path":"https://dieghernan.github.io/nominatimlite/reference/nominatim_check_access.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check access to Nominatim API — nominatim_check_access","text":"logical.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/reference/nominatim_check_access.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check access to Nominatim API — nominatim_check_access","text":"","code":"# \\donttest{ nominatim_check_access() #> [1] TRUE # }"},{"path":"https://dieghernan.github.io/nominatimlite/reference/nominatimlite-package.html","id":null,"dir":"Reference","previous_headings":"","what":"nominatimlite: Interface with 'Nominatim' API Service — nominatimlite-package","title":"nominatimlite: Interface with 'Nominatim' API Service — nominatimlite-package","text":"Lite interface getting data 'OSM' service 'Nominatim' <https://nominatim.org/release-docs/latest/>. Extract coordinates addresses, find places near set coordinates, search amenities return spatial objects 'sf' format.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/reference/nominatimlite-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"nominatimlite: Interface with 'Nominatim' API Service — nominatimlite-package","text":"Maintainer: Diego Hernangómez diego.hernangomezherrero@gmail.com (ORCID) [copyright holder] contributors: Jindra Lacko [contributor, reviewer]","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/osm_amenities.html","id":null,"dir":"Reference","previous_headings":"","what":"OpenStreetMap amenity database — osm_amenities","title":"OpenStreetMap amenity database — osm_amenities","text":"Database list amenities available OpenStreetMap.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/osm_amenities.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"OpenStreetMap amenity database — osm_amenities","text":"tibble amenities corresponding category","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/osm_amenities.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"OpenStreetMap amenity database — osm_amenities","text":"https://wiki.openstreetmap.org/wiki/Key:amenity","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/reference/osm_amenities.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"OpenStreetMap amenity database — osm_amenities","text":"Data extracted 14 June 2021.","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/reference/osm_amenities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OpenStreetMap amenity database — osm_amenities","text":"","code":"amenities <- nominatimlite::osm_amenities  amenities #> # A tibble: 100 × 2 #>    category   amenity        #>    <chr>      <chr>          #>  1 Sustenance bar            #>  2 Sustenance biergarten     #>  3 Sustenance cafe           #>  4 Sustenance fast_food      #>  5 Sustenance food_court     #>  6 Sustenance ice_cream      #>  7 Sustenance pub            #>  8 Sustenance restaurant     #>  9 Education  college        #> 10 Education  driving_school #> # … with 90 more rows"},{"path":"https://dieghernan.github.io/nominatimlite/reference/reverse_geo_lite.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse geocode coordinates — reverse_geo_lite","title":"Reverse geocode coordinates — reverse_geo_lite","text":"Reverse geocodes geographic coordinates (latitude longitude) given numeric values. Latitudes must -90 90 longitudes must -180 180.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/reverse_geo_lite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse geocode coordinates — reverse_geo_lite","text":"","code":"reverse_geo_lite(   lat,   long,   address = \"address\",   full_results = FALSE,   return_coords = TRUE,   verbose = FALSE,   custom_query = list() )"},{"path":"https://dieghernan.github.io/nominatimlite/reference/reverse_geo_lite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse geocode coordinates — reverse_geo_lite","text":"lat latitude values (input data) long longitude values (input data) address name address column (output data) full_results returns available data geocoding service TRUE. FALSE (default) single address column returned geocoding service. return_coords return input coordinates results TRUE. Note services return input coordinates full_results = TRUE setting return_coords FALSE prevent . verbose TRUE detailed logs output console. FALSE default. Can set permanently options(tidygeocoder.verbose = TRUE) custom_query API-specific parameters used, passed named list (ie. list(zoom = 3)). See Details.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/reverse_geo_lite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse geocode coordinates — reverse_geo_lite","text":"tibble results.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/reverse_geo_lite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reverse geocode coordinates — reverse_geo_lite","text":"See https://nominatim.org/release-docs/develop/api/Reverse/ additional parameters passed custom_query. Use option custom_query = list(zoom = 3) adjust output. equivalences terms zoom:","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/reference/reverse_geo_lite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse geocode coordinates — reverse_geo_lite","text":"","code":"# \\donttest{  reverse_geo_lite(lat = 40.75728, long = -73.98586) #> # A tibble: 1 × 3 #>   address                                                              lat   lon #>   <chr>                                                              <dbl> <dbl> #> 1 Times Square, West 44th Street, Theater District, Manhattan Commu…  40.8 -74.0  # Several coordinates reverse_geo_lite(   lat = c(40.75728, 55.95335),   long = c(-73.98586, -3.188375) ) #> # A tibble: 2 × 3 #>   address                                                             lat    lon #>   <chr>                                                             <dbl>  <dbl> #> 1 Times Square, West 44th Street, Theater District, Manhattan Comm…  40.8 -74.0  #> 2 2, Waterloo Place, Greenside, New Town/Broughton, City of Edinbu…  56.0  -3.19  # With options: zoom to country reverse_geo_lite(   lat = c(40.75728, 55.95335),   long = c(-73.98586, -3.188375),   custom_query = list(zoom = 0),   verbose = TRUE,   full_results = TRUE ) #> # A tibble: 2 × 10 #>   address    lat     lon place_id licence   osm_type osm_id country country_code #>   <chr>    <dbl>   <dbl>    <int> <chr>     <chr>     <int> <chr>   <chr>        #> 1 United …  39.8 -100.     2.82e8 Data © O… relation 148838 United… us           #> 2 United …  54.7   -3.28   2.82e8 Data © O… relation  62149 United… gb           #> # … with 1 more variable: boundingbox <list> # }"},{"path":"https://dieghernan.github.io/nominatimlite/reference/reverse_geo_lite_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Get spatial objects through reverse geocoding — reverse_geo_lite_sf","title":"Get spatial objects through reverse geocoding — reverse_geo_lite_sf","text":"function allows extract spatial object located known pair coordinates (lat, long). Latitudes must -90 90 longitudes must -180 180.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/reverse_geo_lite_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get spatial objects through reverse geocoding — reverse_geo_lite_sf","text":"","code":"reverse_geo_lite_sf(   lat,   long,   address = \"address\",   full_results = FALSE,   return_coords = TRUE,   verbose = FALSE,   custom_query = list(),   points_only = TRUE )"},{"path":"https://dieghernan.github.io/nominatimlite/reference/reverse_geo_lite_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get spatial objects through reverse geocoding — reverse_geo_lite_sf","text":"lat latitude values (input data) long longitude values (input data) address name address column (output data) full_results returns available data geocoding service TRUE. FALSE (default) single address column returned geocoding service. return_coords return input coordinates results TRUE. Note services return input coordinates full_results = TRUE setting return_coords FALSE prevent . verbose TRUE detailed logs output console. FALSE default. Can set permanently options(tidygeocoder.verbose = TRUE) custom_query API-specific parameters used, passed named list (ie. list(zoom = 3)). See Details. points_only Logical TRUE/FALSE. Whether return spatial points (TRUE, default) potentially shapes provided Nominatim API (FALSE).","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/reverse_geo_lite_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get spatial objects through reverse geocoding — reverse_geo_lite_sf","text":"sf object results.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/reference/reverse_geo_lite_sf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get spatial objects through reverse geocoding — reverse_geo_lite_sf","text":"See https://nominatim.org/release-docs/develop/api/Reverse/ additional parameters passed custom_query. Use option custom_query = list(zoom = 3) adjust output. equivalences terms zoom:","code":""},{"path":[]},{"path":"https://dieghernan.github.io/nominatimlite/reference/reverse_geo_lite_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get spatial objects through reverse geocoding — reverse_geo_lite_sf","text":"","code":"# \\donttest{ library(ggplot2)   Coliseum <- geo_lite(\"Coliseo, Rome, Italy\")  # Coliseum Col_sf <- reverse_geo_lite_sf(   lat = Coliseum$lat,   lon = Coliseum$lon,   points_only = FALSE )  ggplot(Col_sf) +   geom_sf()   # City of Rome - Zoom 10  Rome_sf <- reverse_geo_lite_sf(   lat = Coliseum$lat,   lon = Coliseum$lon,   custom_query = list(zoom = 10),   points_only = FALSE )  ggplot(Rome_sf) +   geom_sf()   # County - Zoom 8  County_sf <- reverse_geo_lite_sf(   lat = Coliseum$lat,   lon = Coliseum$lon,   custom_query = list(zoom = 8),   points_only = FALSE )  ggplot(County_sf) +   geom_sf()  # }"},{"path":"https://dieghernan.github.io/nominatimlite/news/index.html","id":"nominatimlite-015","dir":"Changelog","previous_headings":"","what":"nominatimlite 0.1.5","title":"nominatimlite 0.1.5","text":"CRAN release: 2021-11-26 Avoid de-duplication results.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/news/index.html","id":"nominatimlite-014","dir":"Changelog","previous_headings":"","what":"nominatimlite 0.1.4","title":"nominatimlite 0.1.4","text":"CRAN release: 2021-10-28 Fix issues geo_amenity() geo_amenity_sf().","code":""},{"path":"https://dieghernan.github.io/nominatimlite/news/index.html","id":"nominatimlite-013","dir":"Changelog","previous_headings":"","what":"nominatimlite 0.1.3","title":"nominatimlite 0.1.3","text":"CRAN release: 2021-10-21 Skip API query tests CRAN avoid false positives. Centralize API queries (internal) function api_call(). Queries fully honors now Nominatim Usage Policy. Queries may slower now.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/news/index.html","id":"nominatimlite-012","dir":"Changelog","previous_headings":"","what":"nominatimlite 0.1.2","title":"nominatimlite 0.1.2","text":"CRAN release: 2021-10-07 New internal: nominatim_check_access(). Adapt tests testthat v3.1.0.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/news/index.html","id":"nominatimlite-011","dir":"Changelog","previous_headings":"","what":"nominatimlite 0.1.1","title":"nominatimlite 0.1.1","text":"CRAN release: 2021-09-30 Adapt tests CRAN checks.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/news/index.html","id":"nominatimlite-010","dir":"Changelog","previous_headings":"","what":"nominatimlite 0.1.0","title":"nominatimlite 0.1.0","text":"CRAN release: 2021-09-16 CRAN release. Adjust query rate limits Nominatim policy. New strict argument geo_amenity() geo_amenity_sf(). Parameter polygon changed points_only #8 thanks @jlacko. Package now falls gracefully url reachable.","code":""},{"path":"https://dieghernan.github.io/nominatimlite/news/index.html","id":"nominatimlite-001","dir":"Changelog","previous_headings":"","what":"nominatimlite 0.0.1","title":"nominatimlite 0.0.1","text":"Initial version package","code":""}]
